"""
Update vulnerable dependencies
Cloud Security - Security Fix
"""

import subprocess
import sys

def update_dependencies():
    """Update vulnerable packages to secure versions"""
    
    print("="*60)
    print("UPDATING VULNERABLE DEPENDENCIES")
    print("Cloud Security - Security Fix")
    print("="*60)
    
    # List of packages to update with minimum secure versions
    packages_to_update = [
        ("flask", ">=2.0.0"),
        ("django", ">=3.2"),
        ("requests", ">=2.25.0"),
        ("urllib3", ">=1.26.5"),
        ("pyyaml", ">=5.4"),
        ("jinja2", ">=3.0.0"),
        ("werkzeug", ">=2.0.0"),
        ("sqlalchemy", ">=1.4.0"),
        ("cryptography", ">=3.4.8"),
        ("pillow", ">=9.0.0"),
    ]
    
    print("\nUpdating packages to secure versions...\n")
    
    updated = []
    failed = []
    
    for package, version in packages_to_update:
        try:
            print(f"Updating {package} to {version}...")
            
            # Try to update the package
            result = subprocess.run(
                [sys.executable, "-m", "pip", "install", "--upgrade", f"{package}{version}"],
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                updated.append(package)
                print(f"  [OK] {package} updated successfully")
            else:
                # Package might not be installed, which is fine
                if "not installed" in result.stderr.lower():
                    print(f"  [SKIP] {package} not installed")
                else:
                    failed.append(package)
                    print(f"  [FAIL] {package} update failed")
                    
        except subprocess.TimeoutExpired:
            failed.append(package)
            print(f"  [TIMEOUT] {package} update timed out")
        except Exception as e:
            failed.append(package)
            print(f"  [ERROR] {package}: {e}")
    
    # Generate security requirements file
    print("\n" + "="*60)
    print("Generating secure requirements file...")
    
    secure_requirements = """# Secure Requirements File
# Generated by Cloud Security
# Minimum versions to avoid known vulnerabilities

# Web frameworks
flask>=2.0.0
django>=3.2

# HTTP libraries
requests>=2.25.0
urllib3>=1.26.5
aiohttp>=3.8.0

# Data processing
pandas>=1.3.0
numpy>=1.21.0
pyyaml>=5.4
lxml>=4.6.5

# Security
cryptography>=3.4.8
pycryptodome>=3.14.0
bcrypt>=3.2.0

# Database
sqlalchemy>=1.4.0
psycopg2-binary>=2.9.0

# Image processing
pillow>=9.0.0

# Template engines
jinja2>=3.0.0

# WSGI
werkzeug>=2.0.0

# ML/DL libraries (if used)
# tensorflow>=2.8.0
# torch>=1.10.0
# scikit-learn>=1.0.0
"""
    
    with open("requirements-secure.txt", "w") as f:
        f.write(secure_requirements)
    
    print("  [OK] Secure requirements file created: requirements-secure.txt")
    
    # Summary
    print("\n" + "="*60)
    print("UPDATE SUMMARY")
    print("="*60)
    print(f"Successfully updated: {len(updated)} packages")
    if failed:
        print(f"Failed to update: {len(failed)} packages")
        for pkg in failed:
            print(f"  - {pkg}")
    
    print("\nRecommendations:")
    print("1. Review requirements-secure.txt")
    print("2. Test application with updated packages")
    print("3. Update requirements.txt with secure versions")
    print("4. Run security audit again to verify fixes")
    
    return len(failed) == 0

if __name__ == "__main__":
    success = update_dependencies()
    sys.exit(0 if success else 1)