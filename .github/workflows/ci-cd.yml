name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install minimal requirements for CI
        pip install -r requirements-minimal.txt
        # Install dev dependencies for testing
        pip install pytest pytest-cov flake8 black mypy
    
    - name: Code Quality Checks
      run: |
        # Format check (allow failure for now)
        black --check . || true
        
        # Basic linting - only critical errors
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
        # Type checking (allow failure for now)
        mypy src/ --ignore-missing-imports || true
    
    - name: Security Scan
      run: |
        pip install bandit safety
        # Check for hardcoded credentials
        bandit -r src/ -ll -i -x "*/tests/*,*/test_*.py" || true
        # Check for vulnerable packages
        safety check --json || true
    
    - name: Run Tests
      run: |
        # Create test directory if it doesn't exist
        mkdir -p tests
        # Run tests if they exist
        if [ "$(ls -A tests/*.py 2>/dev/null)" ]; then
          pytest tests/ --cov=src --cov-report=xml --cov-report=html || true
        else
          echo "No tests found, skipping test execution"
        fi
    
    - name: Upload Coverage
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Simplified build job - no Docker for now
  validate:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Validate Project Structure
      run: |
        # Check required files exist
        test -f requirements.txt || exit 1
        test -f .env.example || exit 1
        test -f README.md || exit 1
        
        # Check no hardcoded credentials
        ! grep -r "kugBoHCUcjaaNwGV" --include="*.py" . || exit 1
        ! grep -r "@Nickatnyte3" --include="*.py" . || exit 1
        
        echo "✓ Project structure validated"
    
    - name: Check Environment Variables
      run: |
        # Ensure .env.example has all required variables
        grep -q "CAPITAL_API_KEY" .env.example || exit 1
        grep -q "ALPHA_VANTAGE_API_KEY" .env.example || exit 1
        
        echo "✓ Environment variables documented"

  # Deployment disabled for security
  # deploy:
  #   needs: validate
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Deployment Disabled
  #       run: echo "Deployment is currently disabled for security"