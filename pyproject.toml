[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quantproject"
version = "2.0.0"
description = "Intelligent Quantitative Trading System with Multi-Source Data Integration"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "QuantProject Team", email = "admin@quantproject.com"},
]
keywords = ["trading", "quantitative", "finance", "algorithmic-trading", "backtesting"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Office/Business :: Financial :: Investment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "numpy==1.24.3",
    "pandas==2.0.3",
    "yfinance==0.2.28",
    "requests==2.31.0",
    "python-dotenv==1.0.0",
    "plotly==5.17.0",
    "loguru==0.7.2",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.2",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "black==23.9.1",
    "flake8==6.1.0",
    "mypy==1.5.1",
    "isort==5.12.0",
]

ml = [
    "scikit-learn==1.3.0",
    "torch>=2.0.0",
    "tensorflow>=2.13.0",
    "stable-baselines3>=2.1.0",
    "gym>=0.26.0",
    "optuna>=3.3.0",
]

full = [
    "scipy==1.10.1",
    "statsmodels==0.14.0",
    "pandas-ta==0.3.14b0",
    "matplotlib==3.7.2",
    "seaborn==0.12.2",
    "aiohttp==3.8.5",
    "websockets==11.0.3",
    "sqlalchemy==2.0.21",
]

[project.urls]
Homepage = "https://github.com/quantproject/trading-system"
Documentation = "https://quantproject.readthedocs.io"
Repository = "https://github.com/quantproject/trading-system.git"
Issues = "https://github.com/quantproject/trading-system/issues"

[project.scripts]
quant-trade = "src.main:main"
quant-backtest = "src.backtesting.runner:main"
quant-monitor = "src.monitoring.monitor:main"

[tool.setuptools]
package-dir = {"" = "."}
packages = ["src", "data_pipeline", "config", "execution", "monitoring"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
  | data
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
files = ["src/**/*.py"]
exclude = ["tests/", "scripts/", "examples/"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
pythonpath = [
    ".",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 100
exclude = [
    ".git",
    "__pycache__",
    "docs",
    "build",
    "dist",
    ".venv",
    "logs",
]
ignore = ["E203", "E266", "E501", "W503"]
max-complexity = 10
select = ["B", "C", "E", "F", "W", "T4", "B9"]